prompt ===> my_session
CREATE OR REPLACE PACKAGE BODY my_session
AS
  -- private global to hold dbms_session.unique_session_id
  unique_id_  VARCHAR2(40);

  -- my_session_cur and my_session_rec are both declared
  -- to always hold all columns of V$SESSION
  CURSOR my_session_cur
  IS
  SELECT *
  FROM   sys.v_$session
  WHERE  audsid = USERENV('SESSIONID')
  ;

  my_session_rec  sys.v_$session%ROWTYPE;

  -- returns unique_id_ loaded by call to load_unique_id
  FUNCTION unique_id
  RETURN VARCHAR2
  IS
  BEGIN
    RETURN unique_id_;
  END unique_id;

  -- returns the session id of current session
  FUNCTION sid
  RETURN NUMBER
  IS
  BEGIN
    IF my_session_rec.sid IS NULL
    THEN
      load_my_session_rec;
    END IF;
    RETURN my_session_rec.sid;
  END sid;

  -- loads unique_session_id into global variable, must be called
  -- prior to using function unique_id
  PROCEDURE load_unique_id
  IS
  BEGIN
    unique_id_ := dbms_session.unique_session_id;
  END load_unique_id;

  -- resets all package states, frees memory and initializes
  -- session data
  PROCEDURE reset
  IS
  BEGIN
    DBMS_SESSION.RESET_PACKAGE;
    DBMS_SESSION.FREE_UNUSED_USER_MEMORY;
    load_unique_id;
    load_my_session_rec;
  END reset;

  -- closes all open database links not in use by session,
  -- or all if forced_with_commit_TF is TRUE
  PROCEDURE close_links
  (force_with_commit_TF IN BOOLEAN DEFAULT FALSE
  )
  IS
    -- declare exceptions for ORA errors
    dblink_in_use EXCEPTION;
    PRAGMA EXCEPTION_INIT(dblink_in_use,-2080);

    dblink_not_open EXCEPTION;
    PRAGMA EXCEPTION_INIT(dblink_not_open,-2081);

    -- cursor of all db links available to user
    CURSOR all_links_cur
    IS
    SELECT db_link
    FROM   all_db_links;

  BEGIN
    -- try all links and close the ones you can
    FOR dblink_rec IN all_links_cur
    LOOP
      BEGIN
        DBMS_SESSION.CLOSE_DATABASE_LINK(dblink_rec.db_link);
      EXCEPTION
        WHEN dblink_not_open
        THEN
          NULL;
        WHEN dblink_in_use
          THEN
            IF force_with_commit_TF
            THEN
              COMMIT;
              DBMS_SESSION.CLOSE_DATABASE_LINK(dblink_rec.db_link);
            END IF;
        WHEN OTHERS
          THEN null;
      END;
    END LOOP;
  END close_links;

  -- loads V$SESSION data into global record for current session
  PROCEDURE load_my_session_rec
  IS
  BEGIN
    OPEN my_session_cur;
    FETCH my_session_cur
    INTO  my_session_rec;
    CLOSE my_session_cur;
  END load_my_session_rec;

  -- returns current value of statistic from V$SESSTAT for this session
  FUNCTION statval
  (statname_IN IN VARCHAR2
  )
  RETURN NUMBER
  IS
    CURSOR sesstat_cur (statname VARCHAR2
                       ,sessid   NUMBER
                       )
    IS
    SELECT  s.value
    FROM    sys.v_$sesstat  s
    ,       sys.v_$statname n
    WHERE   s.statistic# = n.statistic#
      AND   s.sid  = sessid
      AND   n.name = statname
    ;

    return_temp  NUMBER;

  BEGIN
    OPEN sesstat_cur(statname_IN
                    ,my_session.sid
                    );
    FETCH sesstat_cur
    INTO  return_temp;
    CLOSE sesstat_cur;
    RETURN return_temp;
  EXCEPTION
    WHEN OTHERS
    THEN
      IF sesstat_cur%ISOPEN
      THEN
        CLOSE sesstat_cur;
      END IF;
      RETURN NULL;
  END statval;

  -- displays session uga and pga using dbms_output
  PROCEDURE memory
  IS
  BEGIN
    dbms_output.enable;
    dbms_output.put_line('session UGA: '||
                         TO_CHAR(my_session.statval('session uga memory'))
                        );
    dbms_output.put_line('session PGA: '||
                         TO_CHAR(my_session.statval('session pga memory'))
                        );
  END memory;

  -- returns session uga and pga
  PROCEDURE get_memory
  (p_uga   OUT  NUMBER
  ,p_pga   OUT  NUMBER
  )
  IS
  BEGIN
    p_uga := my_session.statval('session uga memory');
    p_pga := my_session.statval('session pga memory');
  END get_memory;

  -- turns SQL tracing on/off with tag for file identification
  PROCEDURE set_sql_trace
  (trace_TF IN  BOOLEAN
  ,tag_IN   IN  VARCHAR2 DEFAULT USER
  )
  IS
    cursor_id  INTEGER;
  BEGIN
    dbms_session.set_sql_trace(trace_TF);
    IF trace_TF
    THEN
      cursor_id := dbms_sql.open_cursor;
      dbms_sql.parse (cursor_id
                     ,'SELECT '''||tag_IN||''' FROM DUAL'
                     ,dbms_sql.native
                     );
      --
      dbms_sql.close_cursor(cursor_id);
    END IF;
  END set_sql_trace;
  --
END my_session;
/
sho err
